SUMMARYFILENAME="SummaryFile.csv")
check_input_args(input_check$names, input_check$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), SAMPLESIZES=c(1),
MEASURES=c("Velocity","Displacement"),
RESULTFILENAME="ATestSummary.csv",
ALTFILENAME="AltResult.csv",
OUTPUTFILECOLSTART = 10,
OUTPUTFILECOLEND = 2,
SUMMARYFILENAME="SummaryFile.csv")
check_input_args(input_check$names, input_check$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), SAMPLESIZES=c(1),
MEASURES=c("Velocity","Displacement"),
RESULTFILENAME="ATestSummary.csv",
ALTFILENAME="AltResult.csv",
OUTPUTFILECOLSTART = 1,
OUTPUTFILECOLEND = 2,
SUMMARYFILENAME=VAR)
check_input_args(input_check$names, input_check$input)
devtools::load_all(".")
check_input_args(input_check$names, input_check$input)
input_arguments
make_input_arguments_object <- function(...)
{
#print(names(match.call())[-1])
return(list("input"=as.list(match.call()),"names"=names(match.call())[-1]))
}
input_arguments <- make_input_arguments_object(FILEPATH=getwd(), SAMPLESIZES=c(1,5,50,100,300),
MEASURES=c("Velocity","Displacement"),
SUMMARYFILENAME="ATestSummary.csv",
ATESTRESULTS_OBJECT = a_test_results,
ATESTRESULTS_FILE = NULL)
input_arguments
input_arguments$input
input_arguments$input[[1]]
input_arguments$input[[1]]=="make_input_arguments_object"
devtools::load_all(".")
data("a_test_results")
input_arguments <- make_input_arguments_object(FILEPATH=getwd(), SAMPLESIZES=c(1,5,50,100,300),
MEASURES=c("Velocity","Displacement"),
SUMMARYFILENAME="ATestSummary.csv",
ATESTRESULTS_OBJECT = a_test_results,
ATESTRESULTS_FILE = NULL)
check_input_args(input_check$names, input_check$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), SAMPLESIZES=c(1,5,50,100,300),
MEASURES=c("Velocity","Displacement"),
SUMMARYFILENAME="ATestSummary.csv",
ATESTRESULTS_OBJECT = a_test_results,
ATESTRESULTS_FILE = NULL)
check_input_args(input_check$names, input_check$input)
write.csv(a_test_results,file=file.path(getwd(),"ATests.csv"),row.names=F,quote=F)
input_check <- make_input_arguments_object(FILEPATH=getwd(), SAMPLESIZES=c(1,5,50,100,300),
MEASURES=c("Velocity","Displacement"),
SUMMARYFILENAME="ATestSummary.csv",
ATESTRESULTS_FILE = "ATests.csv")
check_input_args(input_check$names, input_check$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), SAMPLESIZES=A,
MEASURES=c("Velocity","Displacement"),
SUMMARYFILENAME="ATestSummary.csv",
ATESTRESULTS_FILE = "ATests.csv")
check_input_args(input_check$names, input_check$input)
file.remove(file.path(getwd(),"ATests.csv"))
a<-c("NUMSUBSETSPERSAMPLESIZE","NUMRUNSPERSAMPLE"))
a<-c("NUMSUBSETSPERSAMPLESIZE","NUMRUNSPERSAMPLE")
argNames
a<-c("NUMSUBSETSPERSAMPLESIZE","NUMRUNSPERSAMPLE","FILEPATH")
argNames[1] %in% a
argNames[arg] %in% c("NUMSUBSETSPERSAMPLESIZE","NUMRUNSPERSAMPLE")
arg<-1
argNames[arg] %in% c("NUMSUBSETSPERSAMPLESIZE","NUMRUNSPERSAMPLE")
argNames[arg] %in% c("NUMSUBSETSPERSAMPLESIZE","NUMRUNSPERSAMPLE","FILEPATH")
devtools::load_all(".")
devtools::load_all(".")
devtools::test()
input_arguments <- make_input_arguments_object(PARAMETERS=c("A","B"),PARAMVALS=c("0.1,0.2","1,2,3","1,2"))
check_paramvals_length_equals_parameter_length(input_arguments,TRUE)
length(eval(arguments$PARAMETERS)) == length(eval(arguments$PARAMVALS))
length(eval(arguments$PARAMETERS))
input_arguments
check_paramvals_length_equals_parameter_length(input_arguments$input,TRUE)
devtools::load_all(".")
input_arguments <- make_input_arguments_object(FILEPATH=getwd())
expect_true(check_filepath_exists(input_arguments$input$FILEPATH,"FILEPATH"))
check_filepath_exists(input_arguments$input$FILEPATH,"FILEPATH")
input_arguments <- make_input_arguments_object(FILEPATH=file.path(getwd(),"2"))
check_filepath_exists(input_arguments$input$FILEPATH,"FILEPATH")
devtools::load_all(".")
devtools::test()
data("tutorial_consistency_set")
scores <- aa_getATestResults(getwd(), c(1,50), 20, c("Velocity","Displacement"),
"AA_A_Test_Summary.csv", 0.23,
AA_SIM_RESULTS_FILE = NULL,
AA_SIM_RESULTS_OBJECT = tutorial_consistency_set,
TIMEPOINTS = NULL,
TIMEPOINTSCALE = NULL, GRAPHNAME = NULL)
devtools::load_all(".")
scores <- aa_getATestResults(getwd(), c(1,50), 20, c("Velocity","Displacement"),
"AA_A_Test_Summary.csv", 0.23,
AA_SIM_RESULTS_FILE = NULL,
AA_SIM_RESULTS_OBJECT = tutorial_consistency_set,
TIMEPOINTS = NULL,
TIMEPOINTSCALE = NULL, GRAPHNAME = NULL)
devtools::load_all(".")
scores <- aa_getATestResults(getwd(), c(1,50), 20, c("Velocity","Displacement"),
"AA_A_Test_Summary.csv", 0.23,
AA_SIM_RESULTS_FILE = NULL,
AA_SIM_RESULTS_OBJECT = tutorial_consistency_set,
TIMEPOINTS = NULL,
TIMEPOINTSCALE = NULL, GRAPHNAME = NULL)
devtools::load_all(".")
scores <- aa_getATestResults(getwd(), c(1,50), 20, c("Velocity","Displacement"),
"AA_A_Test_Summary.csv", 0.23,
AA_SIM_RESULTS_FILE = NULL,
AA_SIM_RESULTS_OBJECT = tutorial_consistency_set,
TIMEPOINTS = NULL,
TIMEPOINTSCALE = NULL, GRAPHNAME = NULL)
devtools::load_all(".")
scores <- aa_getATestResults(getwd(), c(1,50), 20, c("Velocity","Displacement"),
"AA_A_Test_Summary.csv", 0.23,
AA_SIM_RESULTS_FILE = NULL,
AA_SIM_RESULTS_OBJECT = tutorial_consistency_set,
TIMEPOINTS = NULL,
TIMEPOINTSCALE = NULL, GRAPHNAME = NULL)
devtools::load_all(".")
devtools::test()
input_arguments <- make_input_arguments_object(PMIN=c(1,1,1),PMAX=c(10,10,10), PINC=c(1,1,1),PARAMVALS=NULL)
check_robustness_range_or_values(input_arguments$input,input_arguments$names)
input_arguments$input
input_arguments <- make_input_arguments_object(PMIN=c(1,1,1),PMAX=c(10,10,10), PINC=c(1,1,1),PARAMVALS=NULL)
arguments<-input_arguments
is.null(eval(arguments$PARAMVALS))
is.null(eval(arguments$PMIN)) | is.null(eval(arguments$PMAX)) | is.null(eval(arguments$PINC))
is.null(eval(arguments$PMIN)
)
arguments
arguments<-input_arguments$input
is.null(eval(arguments$PARAMVALS))
is.null(eval(arguments$PMIN)) | is.null(eval(arguments$PMAX)) | is.null(eval(arguments$PINC))
devtools::load_all(".")
input_arguments <- make_input_arguments_object(PMIN=c(1,1,1),PMAX=c(10,10,10), PINC=c(1,1,1),PARAMVALS=NULL)
check_robustness_range_or_values(input_arguments$input,input_arguments$names)
rm(list=ls())
input_arguments <- make_input_arguments_object(PMIN=NULL,PMAX=NULL, PINC=NULL,PARAMVALS=c("0.1,0.2","0.1,0.2","0.1,0.2"))
check_robustness_range_or_values(input_arguments$input,input_arguments$names)
input_arguments <- make_input_arguments_object(PMIN=c(1,1,1),PMAX=c(10,10,10), PINC=c(1,1,1),PARAMVALS=c("0.1,0.2","0.1,0.2","0.1,0.2"))
check_robustness_range_or_values(input_arguments$input,input_arguments$names)
devtools::test()
input_arguments <- make_input_arguments_object(NUMSAMPLES=65)
check_argument_positive_int(input_arguments$input$NUMSAMPLES,"NUMSAMPLES")
devtools::load_all(".")
devtools::test()
input_arguments <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES=65, NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_efast_sampling_args(input_arguments$input)
arguments<-input_arguments$input
arguments
input_arguments <- make_input_arguments_object(AA_SIM_RESULTS_FILE = "AA_SimResponses.csv", AA_SIM_RESULTS_OBJECT=NULL, FILEPATH=getwd())
check_consistency_result_type(input_arguments$input, "AA_SIM_RESULTS_FILE","AA_SIM_RESULTS_OBJECT")
rObjArg<-"AA_SIM_RESULTS_OBJECT"
fileArg<-"AA_SIM_RESULTS_FILE""
""
fileArg<-"AA_SIM_RESULTS_FILE"
arguments<-input_arguments$input
r_object <- eval(arguments[rObjArg][[1]])
file_name <- eval(arguments[fileArg][[1]])
filepath <- eval(arguments$FILEPATH)
is.null(r_object) & is.null(file_name)
input_arguments <- make_input_arguments_object(AA_SIM_RESULTS_FILE = "AA_SimResponses.csv", AA_SIM_RESULTS_OBJECT=NULL, FILEPATH=getwd())
arguments<-input_arguments$input
arguments
r_object <- eval(arguments[rObjArg][[1]])
file_name <- eval(arguments[fileArg][[1]])
filepath <- eval(arguments$FILEPATH)
s.null(r_object) & is.null(file_name)
is.null(r_object) & is.null(file_name)
is.null(r_object)
file_check <- check_text(arguments[fileArg][[1]], preCheckSuccess, fileArg)
file_check <- check_text(arguments[fileArg][[1]], fileArg)
input_arguments <- make_input_arguments_object(AA_SIM_RESULTS_FILE = "AA_SimResponses.csv", AA_SIM_RESULTS_OBJECT=NULL, FILEPATH=getwd())
check_consistency_result_type(input_arguments$input, "AA_SIM_RESULTS_FILE","AA_SIM_RESULTS_OBJECT")
make_file <- file.create(paste(getwd(),"/AA_SimResponses.csv",sep=""))
input_arguments <- make_input_arguments_object(AA_SIM_RESULTS_FILE = "AA_SimResponses.csv", AA_SIM_RESULTS_OBJECT=NULL, FILEPATH=getwd())
check_consistency_result_type(input_arguments$input, "AA_SIM_RESULTS_FILE","AA_SIM_RESULTS_OBJECT")
make_file <- file.create(paste(getwd(),"/AA_SimResponses.csv",sep=""))
input_arguments <- make_input_arguments_object(AA_SIM_RESULTS_FILE = "AA_SimResponses.csv", AA_SIM_RESULTS_OBJECT=NULL, FILEPATH=getwd())
arguments<-input_arguments$input
r_object <- eval(arguments[rObjArg][[1]])
file_name <- eval(arguments[fileArg][[1]])
filepath <- eval(arguments$FILEPATH)
is.null(r_object) & is.null(file_name)
is.null(r_object)
file_check <- check_text(arguments[fileArg][[1]], fileArg)
file_check
file.exists(file.path(filepath,file_name))
input_check <- make_input_arguments_object(FILEPATH=getwd(), SAMPLESIZES=c(1),
MEASURES=c("Velocity","Displacement"),
RESULTFILENAME="ATestSummary.csv",
ALTFILENAME="AltResult.csv",
OUTPUTFILECOLSTART = 1,
OUTPUTFILECOLEND = 2,
SUMMARYFILENAME=VAR)
check_input_args(input_check$names, input_check$input)
dir.create(file.path(getwd(),"1"))
write.csv(rbind(seq(1,4,1)), file=file.path(getwd(),"1","ATestSummary.csv"), quote=F, row.names=F)
write.csv(rbind(seq(1,4,1)), file=file.path(getwd(),"1","AltResult.csv"), quote=F, row.names=F)
input_check <- make_input_arguments_object(FILEPATH=getwd(), SAMPLESIZES=c(1),
MEASURES=c("Velocity","Displacement"),
RESULTFILENAME="ATestSummary.csv",
ALTFILENAME="AltResult.csv",
OUTPUTFILECOLSTART = 1,
OUTPUTFILECOLEND = 2,
SUMMARYFILENAME=VAR)
check_input_args(input_check$names, input_check$input)
argNames<-input_check$names
arguments<-input_check$input
check_methods_to_call <- generate_list_of_checks(argNames)
argNames
check_method<-6
identical(check_methods_to_call[[check_method]],check_double_value_in_range)
identical(check_methods_to_call[[check_method]],check_consistency_result_type)
identical(check_methods_to_call[[check_method]],check_column_ranges)
filepath <- get_correct_file_path_for_function(input_arguments)
input_arguments<-arguments
input_arguments[[1]]
devtools::test()
devtools::load_all(".")
devtools::test()
devtools::test()
devtools::load_all(".")
devtools::test()
efast_generate_sample(getwd(), "A", 65, c("BindProbability", "ChemoThreshold", "Dummy"),
c(0, 0.10, 1),
PMAX <- c(100, 0.9, 10)
)
devtools::load_all(".")
devtools::load_all(".")
devtools::test()
devtools::test()
lhc_generate_lhc_sample(FILEPATH=NULL, c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
getwd()
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
expect_true(check_filepath_exists(input_arguments$input,"FILEPATH"))
input_arguments <- make_input_arguments_object(FILEPATH=getwd())
check_filepath_exists(input_arguments$input,"FILEPATH")
input_arguments
arguments<-input_arguments$input
argument_name="FILEPATH"
arguments[argument_name]
arguments[argument_name][[1]]
devtools::load_all(".")
input_arguments <- make_input_arguments_object(FILEPATH=getwd())
check_filepath_exists(input_arguments$input,"FILEPATH")
input_arguments <- make_input_arguments_object(FILEPATH=file.path(getwd(),"2"))
check_filepath_exists(input_arguments$input$FILEPATH,"FILEPATH")
input_arguments <- make_input_arguments_object(FILEPATH=VAR)
check_filepath_exists(input_arguments$input$FILEPATH,"FILEPATH")
input_arguments <- make_input_arguments_object(FILEPATH=NULL)
check_filepath_exists(input_arguments$input$FILEPATH,"FILEPATH")
devtools::load_all(".")
input_arguments <- make_input_arguments_object(SAMPLESIZES=c(1,5,50,100,300))
check_list_all_integers(input_arguments$input,"SAMPLESIZES")
argument_name<-SAMPL
devtools::load_all(".")
input_arguments <- make_input_arguments_object(SAMPLESIZES=c(1,5,50,100,300))
check_list_all_integers(input_arguments$input,"SAMPLESIZES")
input_arguments <- make_input_arguments_object(SAMPLESIZES=c(1,5,"A",100,300))
check_list_all_integers(input_arguments$input, "SAMPLESIZES")
input_arguments <- make_input_arguments_object(SAMPLESIZES=c(1,5,-2,100,300))
check_list_all_integers(input_arguments$input, "SAMPLESIZES")
input_arguments <- make_input_arguments_object(SAMPLESIZES=c(1,5,R,100,300))
check_list_all_integers(input_arguments$input, "SAMPLESIZES")
devtools::load_all(".")
devtools::load_all(".")
check_text_list(c("setup","go","output"),"MEASURES")
check_text_list(c("setup","go",123),"MEASURES")
input_arguments <- make_input_arguments_object(MEASURES=c("setup","go",VAR))
check_text_list(input_arguments$input, "MEASURES")
input_arguments <- make_input_arguments_object(MEASURES=c("nullTest","nullTest",NULL))
check_text_list(input_arguments$input, "MEASURES")
check_text_list(c("setup",data.frame(seq(1,5,by=1))), "NETLOGO_SETUP_FUNCTION")
input_arguments <- make_input_arguments_object(NUMSAMPLES=65)
expect_true(check_argument_positive_int(input_arguments$input,"NUMSAMPLES"))
input_arguments <- make_input_arguments_object(NUMSAMPLES=65)
check_argument_positive_int(input_arguments$input,"NUMSAMPLES")
arguments<-input_arguments$input
argument_name<-"NUMSAMPLES"
arg <- eval(arguments[argument_name][[1]])
arg
all.equal(arg, as.integer(arg)) & arg > 0
devtools::load_all(".")
input_arguments <- make_input_arguments_object(NUMSAMPLES=65)
check_argument_positive_int(input_arguments$input,"NUMSAMPLES")
input_arguments <- make_input_arguments_object(numsamples=65)
check_argument_positive_int(input_arguments$input,"NUMSAMPLES")
input_arguments <- make_input_arguments_object(numSamples=65)
check_argument_positive_int(input_arguments$input,"NUMSAMPLES")
input_arguments <- make_input_arguments_object(NUMSAMPLES=-50)
check_argument_positive_int(input_arguments$input,"NUMSAMPLES")
input_arguments <- make_input_arguments_object(NUMSAMPLES=50.234)
check_argument_positive_int(input_arguments$input,"NUMSAMPLES")
input_arguments <- make_input_arguments_object(NUMSAMPLES="A")
check_argument_positive_int(input_arguments$input,"NUMSAMPLES")
input_arguments <- make_input_arguments_object(NUMSAMPLES=A)
check_argument_positive_int(input_arguments$input,"NUMSAMPLES")
input_arguments <- make_input_arguments_object(NUMSAMPLES=NULL)
check_argument_positive_int(input_arguments$input,"NUMSAMPLES")
devtools::load_all(".")
check_text("setup","NETLOGO_SETUP_FUNCTION")
check_text(125,"NETLOGO_SETUP_FUNCTION")
input_arguments <- make_input_arguments_object(NETLOGO_SETUP_FUNCTION=VAR)
check_text(input_arguments$input, "NETLOGO_SETUP_FUNCTION")
input_arguments <- make_input_arguments_object(NETLOGO_SETUP_FUNCTION=NULL)
check_text(input_arguments$input, "NETLOGO_SETUP_FUNCTION")
check_text(data.frame(seq(1,5,by=1)), "NETLOGO_SETUP_FUNCTION")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
devtools::load_all(".")
lhcSample <- lhc_generate_lhc_sample(FILEPATH=getwd(), c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
expect_equal(nrow(lhcSample),500)
nrow(lhcSample)
lhc_generate_lhc_sample(FILEPATH=NULL, c("A","B"), 500, c(10,0.1), c(100,0.9), "normal")
ncol(lhcSample)
file.exists(paste(getwd(),"/LHC_Parameters_for_Runs.csv",sep=""))
input_arguments <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES=65, NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_arguments$names, input_check$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES=65, NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_arguments$names, input_check$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES="A", NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_efast_sampling_args(input_arguments$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES=65, NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_check$names, input_check$input)
expect_false(check_input_args(input_check$names, input_check$input))
check_input_args(input_check$names, input_check$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES="A", NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_check$names, input_check$input)
input_check
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES="A", NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_check$names, input_check$input)
argNames<-input_check$names
arguments<-input_check$input
check_methods_to_call <- generate_list_of_checks(argNames)
input_arguments<-arguments
function_args<-argNames
check_method<-2
function_args[check_method]
!is.null(check_methods_to_call[[check_method]])
check_methods_to_call[[check_method]](input_arguments, function_args[check_method])
input_arguments
check_method
check_methods_to_call[[check_method]]
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES=65, NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_check$names, input_check$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES="A", NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_check$names, input_check$input)
devtools::load_all(".")
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES="A", NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_check$names, input_check$input)
argNames<-input_check$names
arguments<-input_check$input
check_methods_to_call <- generate_list_of_checks(argNames)
check_methods_to_call
input_arguments<-arguments
function_args<-argNames
check_method<-2
identical(check_methods_to_call[[check_method]],check_double_value_in_range)
identical(check_methods_to_call[[check_method]],check_consistency_result_type)
identical(check_methods_to_call[[check_method]],check_column_ranges)
!is.null(check_methods_to_call[[check_method]])
check_methods_to_call[[check_method]](input_arguments, function_args[check_method])
devtools::load_all(".")
devtools::load_all(".")
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES=65, NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_check$names, input_check$input)
input_check <- make_input_arguments_object(FILEPATH=getwd(), NUMSAMPLES="A", NUMCURVES=3, PARAMETERS=c("A","B"),PMIN=c(0,1),PMAX=c(100,2))
check_input_args(input_check$names, input_check$input)
devtools::load_all(".")
devtools::test()
devtools::load_all(".")
devtools::test()
efast_generate_sample_netlogo(
FILEPATH=getwd(), 1, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
rm(list=ls())
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
print(input_arguments[[1]])
devtools::load_all(".")
efast_generate_sample_netlogo(
FILEPATH=getwd(), 3, 65,
c("death-thru-sickness","death-but-immune","death-old-age","death-old-and-sick"),
c("people","infectiousness","dummy"),
c(150,"[10,90]","[1,10]"),
1,"true","setup","go")
devtools::load_all(".")
devtools::test()
input_arguments <- make_input_arguments_object(FILEPATH=file.path(getwd(),"2"))
check_filepath_exists(input_arguments$input,"FILEPATH")
input_arguments$input
devtools::check()
